package group.tonight.electricityfeehelper.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, Long.class, "uid", false, "UID");
        public final static Property YingShou = new Property(2, double.class, "yingShou", false, "YING_SHOU");
        public final static Property ShiShou = new Property(3, double.class, "shiShou", false, "SHI_SHOU");
        public final static Property QianFei = new Property(4, double.class, "qianFei", false, "QIAN_FEI");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property OrderDate = new Property(6, String.class, "orderDate", false, "ORDER_DATE");
        public final static Property CreateTime = new Property(7, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(8, long.class, "updateTime", false, "UPDATE_TIME");
    }

    private Query<Order> user_OrdersQuery;

    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UID\" INTEGER," + // 1: uid
                "\"YING_SHOU\" REAL NOT NULL ," + // 2: yingShou
                "\"SHI_SHOU\" REAL NOT NULL ," + // 3: shiShou
                "\"QIAN_FEI\" REAL NOT NULL ," + // 4: qianFei
                "\"REMARKS\" TEXT," + // 5: remarks
                "\"ORDER_DATE\" TEXT," + // 6: orderDate
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL );"); // 8: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
        stmt.bindDouble(3, entity.getYingShou());
        stmt.bindDouble(4, entity.getShiShou());
        stmt.bindDouble(5, entity.getQianFei());
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(7, orderDate);
        }
        stmt.bindLong(8, entity.getCreateTime());
        stmt.bindLong(9, entity.getUpdateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(2, uid);
        }
        stmt.bindDouble(3, entity.getYingShou());
        stmt.bindDouble(4, entity.getShiShou());
        stmt.bindDouble(5, entity.getQianFei());
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
 
        String orderDate = entity.getOrderDate();
        if (orderDate != null) {
            stmt.bindString(7, orderDate);
        }
        stmt.bindLong(8, entity.getCreateTime());
        stmt.bindLong(9, entity.getUpdateTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uid
            cursor.getDouble(offset + 2), // yingShou
            cursor.getDouble(offset + 3), // shiShou
            cursor.getDouble(offset + 4), // qianFei
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderDate
            cursor.getLong(offset + 7), // createTime
            cursor.getLong(offset + 8) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setYingShou(cursor.getDouble(offset + 2));
        entity.setShiShou(cursor.getDouble(offset + 3));
        entity.setQianFei(cursor.getDouble(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.getLong(offset + 7));
        entity.setUpdateTime(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orders" to-many relationship of User. */
    public List<Order> _queryUser_Orders(Long uid) {
        synchronized (this) {
            if (user_OrdersQuery == null) {
                QueryBuilder<Order> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Uid.eq(null));
                user_OrdersQuery = queryBuilder.build();
            }
        }
        Query<Order> query = user_OrdersQuery.forCurrentThread();
        query.setParameter(0, uid);
        return query.list();
    }

}
